package com.stano.schema.gensql.impl.h2;

import com.stano.schema.gensql.impl.common.ColumnTypeGenerator;
import com.stano.schema.gensql.impl.common.SQLGenerator;
import com.stano.schema.model.Column;
import com.stano.schema.model.ColumnType;
import com.stano.schema.model.Schema;

class H2ColumnTypeGenerator extends ColumnTypeGenerator {
  H2ColumnTypeGenerator(SQLGenerator sqlGenerator) {
    super(sqlGenerator);
  }

  @Override
  protected String getSequenceSql() {
    return "integer generated by default as identity (start with 1)";
  }

  @Override
  protected String getLongSequenceSql() {
    return "bigint generated by default as identity (start with 1)";
  }

  @Override
  protected String getTextSql(Column column) {
    return "character large object";
  }

  @Override
  protected String getBinarySql() {
    return "binary large object";
  }

  @Override
  protected String getUUIDSql(Column column) {
    return "uuid";
  }

  @Override
  protected String getUUIDDefaultValueSql(Schema schema) {
    return "random_uuid(7)";
  }

  @Override
  protected String getArraySql(Column column) {
    ColumnType elementType = column.getElementType();

    return switch (elementType) {
      case ColumnType.VARCHAR -> getVarcharSql(column) + " array";
      case ColumnType.CHAR -> getCharSql(column) + " array";
      case ColumnType.TEXT -> getTextSql(column) + " array";
      case ColumnType.DECIMAL -> getDecimalSql(column) + " array";
      default -> elementType.name() + " array";
    };
  }
}
