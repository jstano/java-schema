package com.stano.schema.installer.liquibase;

import com.stano.jdbcutils.utils.SqlUtils;
import com.stano.jdbcutils.utils.TransactionalExecutor;
import com.stano.schema.migrations.MigrationServices;
import liquibase.database.Database;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseUpgradeLog {
  private MigrationServices migrationServices = new MigrationServices();

  public int start(Database database, Connection connection, String changeLogResource) {
    return TransactionalExecutor.withConnection(connection).execute(() -> {
      ensureDatabaseUpgradeLogTableExists(database, connection);

      try (Statement statement = connection.createStatement()) {
        statement.executeUpdate(String.format("insert into databaseupgradelog (StartDateTime,ChangeLogName) values (%s,%s)", //NON-NLS
                                              database.getCurrentDateTimeFunction(),
                                              SqlUtils.quoteSqlString(changeLogResource.substring(changeLogResource.lastIndexOf("/") + 1))),
                                Statement.RETURN_GENERATED_KEYS);

        try (ResultSet rs = statement.getGeneratedKeys()) {
          if (rs.next()) {
            return rs.getInt(1);
          }
        }
      }

      return 0;
    });
  }

  public void finish(Database database, Connection connection, int databaseChangeLogId, String error) {
    TransactionalExecutor.withConnection(connection).execute(() -> {
      try (Statement statement = connection.createStatement()) {
        if (error != null) {
          statement.executeUpdate(String.format("update databaseupgradelog set EndDateTime = %s, Error = %s where ID = %d", //NON-NLS
                                                database.getCurrentDateTimeFunction(),
                                                SqlUtils.quoteSqlString(error),
                                                databaseChangeLogId));
        }
        else {
          statement.executeUpdate(String.format("update databaseupgradelog set EndDateTime = %s where ID = %d", //NON-NLS
                                                database.getCurrentDateTimeFunction(),
                                                databaseChangeLogId));
        }
      }
    });
  }

  private void ensureDatabaseUpgradeLogTableExists(Database database, Connection connection) throws SQLException {
    if (!databaseUpgradeLogTableExists(connection)) {
      try (Statement statement = connection.createStatement()) {
        String databaseShortName = database.getShortName();

        if (databaseShortName.equalsIgnoreCase("mssql")) { //NON-NLS
          statement.executeUpdate(
            "create table dbo.databaseupgradelog (ID integer identity(1,1) not null,StartDateTime datetime not null,EndDateTime datetime,ChangeLogName varchar(max),Error varchar(max),constraint pk_databaseupgradelog primary key (ID))");//NON-NLS
        }
        else if (databaseShortName.equalsIgnoreCase("postgresql")) { //NON-NLS
          statement.executeUpdate(
            "create table databaseupgradelog (ID serial not null,StartDateTime timestamp not null,EndDateTime timestamp,ChangeLogName text,Error text,constraint pk_databaseupgradelog primary key (ID))");//NON-NLS
        }
        else if (databaseShortName.equalsIgnoreCase("h2")) { //NON-NLS
          statement.executeUpdate(
            "create table databaseupgradelog (ID integer generated by default as identity (start with 1) not null,StartDateTime datetime not null,EndDateTime datetime,ChangeLogName longvarchar,Error longvarchar,constraint pk_databaseupgradelog primary key (ID))");//NON-NLS
        }
        else if (databaseShortName.equalsIgnoreCase("hsqldb")) { //NON-NLS
          statement.executeUpdate(
            "create table databaseupgradelog (ID integer generated by default as identity (start with 1) not null,StartDateTime datetime not null,EndDateTime datetime,ChangeLogName longvarchar,Error longvarchar,constraint pk_databaseupgradelog primary key (ID))");//NON-NLS
        }
      }
    }
  }

  private boolean databaseUpgradeLogTableExists(Connection connection) throws SQLException {
    if (migrationServices.tableExists(connection, "databaseupgradelog")) {
      if (!databaseUpgradeLogHasChangeLogName(connection)) {
        executeSQL(connection, "alter table databaseupgradelog add ChangeLogName varchar(200)"); //NON-NLS
        executeSQL(connection, "alter table databaseupgradelog add constraint pk_databaseupgradelog primary key (ID)"); //NON-NLS
      }

      return true;
    }

    return false;
  }

  private boolean databaseUpgradeLogHasChangeLogName(Connection connection) throws SQLException {
    return migrationServices.columnExists(connection, "databaseupgradelog", "changelogname");
  }

  private void executeSQL(Connection connection, String sql) throws SQLException {
    try (Statement statement = connection.createStatement()) {
      statement.executeUpdate(sql);
    }
  }
}
